import numpy as np
from torch import nn
import torch
from torchvision import models
import albumentations as A
from albumentations.pytorch.transforms import ToTensorV2
import cv2

data_bytes_path = 'E:\\datasets\\malware-classification\\train\\0A32eTdBKayjCWhZqDOQ.bytes'
data_bytes = np.fromfile(data_bytes_path, dtype=np.int8)
image_path = 'D:\\Study\\stego\\alaska2\\input\\alaska2-image-steganalysis\\Cover\\00001.jpg'

def to_grey_scale_image(input):
    len = input.shape[0]
    width = np.sqrt(len)
    width = np.ceil(width).astype(np.int64)
    padding = np.zeros((width ** 2 - len, ), dtype = np.int8)
    output = np.concatenate((input, padding))
    output = np.reshape(output, (width, width))
    output = np.expand_dims(output, axis=2).repeat(3, axis=2)
    return output

to_standard_size = A.Compose([
            A.HorizontalFlip(p=0.5),
            A.VerticalFlip(p=0.5),
            A.Resize(height=512, width=512, p=1.0),
            ToTensorV2(p=1.0),
        ], p=1.0)

class BaselineModel(nn.Module):

    def __init__(self) -> None:
        super(BaselineModel, self).__init__()
        self.num_classes = 9
        vgg19 = models.vgg19(weights=models.VGG19_Weights.DEFAULT)
        vgg19.classifier = nn.Sequential(
            nn.Linear(512 * 7 * 7, 4096),
            nn.ReLU(True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, 4096),
            nn.ReLU(True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, self.num_classes),
        )
        vgg19.features[0] = nn.Conv2d(
            1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        )
        self.model = vgg19

    def forward(self, x):
        x = self.model(x)
        return x

bl = BaselineModel().cuda()

def pre_process(input):
    img = to_grey_scale_image(input)
    img = to_standard_size(image=img)['img']
    return img

test_image = cv2.imread(image_path, cv2.IMREAD_COLOR)
print(test_image.shape)
print(to_grey_scale_image(data_bytes).shape)

#print(to_grey_scale_image(data_bytes))

#print(bl(pre_process(data_bytes)))
#print(test_concatenate())
#print(to_grey_scale_image(data_bytes))